****Dividend****

#Util Class:

public class ExpenseUtil {

    public boolean validateExpenseCount(String expenseDetails) throws InvalidExpenseException {
        String[] parts = expenseDetails.split(":");
        int expenseCount = Integer.parseInt(parts[0]);
        if (parts.length - 2 != expenseCount) {
            throw new InvalidExpenseException("Number of expenses does not match the provided details");
        }
        return true;
    }

    public boolean validateNumberOfExpenses(String expenseDetails) throws InvalidExpenseException {
        String[] parts = expenseDetails.split(":");
        int expenseCount = Integer.parseInt(parts[0]);
        if (expenseCount <= 1) {
            throw new InvalidExpenseException("Invalid expense value");
        }
        return true;
    }

    public boolean validateExpenseValues(String expenseDetails) throws InvalidExpenseException {
        String[] parts = expenseDetails.split(":");
        for (int i = 1; i < parts.length - 1; i++) {
            double value = Double.parseDouble(parts[i]);
            if (value <= 0) {
                throw new InvalidExpenseException("Invalid expense value");
            }
        }
        return true;
    }

    public double calculateIndividualDividend(String expenseDetails) {
        String[] parts = expenseDetails.split(":");
        double totalExpenses = 0;
        for (int i = 1; i < parts.length - 1; i++) {
            totalExpenses += Double.parseDouble(parts[i]);
        }
        int sharingCount = Integer.parseInt(parts[parts.length - 1]);
        return totalExpenses / sharingCount;
    }
}



#UserInterface:

import java.util.Scanner;

public class UserInterface {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ExpenseUtil expenseUtil = new ExpenseUtil();

        System.out.println("Enter the group expense details");
        String expenseDetails = scanner.nextLine();

        try {
            expenseUtil.validateExpenseCount(expenseDetails);
            expenseUtil.validateNumberOfExpenses(expenseDetails);
            expenseUtil.validateExpenseValues(expenseDetails);
            double dividend = expenseUtil.calculateIndividualDividend(expenseDetails);
            System.out.printf("Individual dividend %.2f%n", dividend);
        } catch (InvalidExpenseException e) {
            System.out.println(e.getMessage());
        } finally {
            System.out.println("Thanks for using dividend");
        }

        scanner.close();
    }
}




*****Fuel Minder******

#Utility Class:

public class BillingUtil {

    public boolean validateBillingId(String billingId) throws InvalidBillingException {
        if (!billingId.matches("BP\\d{4}")) {
            throw new InvalidBillingException("Invalid Billing Id");
        }
        return true;
    }

    public boolean validatePhoneNumber(String phoneNumber) throws InvalidBillingException {
        if (!phoneNumber.matches("\\d{10}")) {
            throw new InvalidBillingException("Invalid Phone Number");
        }
        return true;
    }

    public boolean validateFuelType(String fuelType) throws InvalidBillingException {
        if (!fuelType.equals("Petrol") && !fuelType.equals("Diesel")) {
            throw new InvalidBillingException("Invalid Fuel Type");
        }
        return true;
    }

    public boolean validateQuantity(double quantity) throws InvalidBillingException {
        if (quantity <= 0) {
            throw new InvalidBillingException("Invalid Quantity");
        }
        return true;
    }

    public double calculateBill(String fuelType, double quantity) {
        double costPerLiter = fuelType.equals("Petrol") ? 105 : 95;
        return costPerLiter * quantity;
    }
}


# UserInterface:

import java.util.Scanner;

public class UserInterface {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BillingUtil billingUtil = new BillingUtil();

        System.out.println("Enter the Billing Details");
        String billingDetails = scanner.nextLine();

        String[] details = billingDetails.split(":");
        if (details.length != 6) {
            System.out.println("Invalid input format");
            System.out.println("Thank you for using the Billing application");
            return;
        }

        String billingId = details[0];
        String customerName = details[1];
        String phoneNumber = details[2];
        String billingDate = details[3];  // Not used in calculations
        String fuelType = details[4];
        double quantity;

        try {
            quantity = Double.parseDouble(details[5]);
            billingUtil.validateBillingId(billingId);
            billingUtil.validatePhoneNumber(phoneNumber);
            billingUtil.validateFuelType(fuelType);
            billingUtil.validateQuantity(quantity);
            
            double billAmount = billingUtil.calculateBill(fuelType, quantity);
            System.out.printf("Bill Amount Rs %.2f%n", billAmount);
        } catch (InvalidBillingException e) {
            System.out.println(e.getMessage());
        } catch (NumberFormatException e) {
            System.out.println("Invalid quantity format");
        } finally {
            System.out.println("Thank you for using the Billing application");
        }

        scanner.close();
    }
}



*******Income Tax******


# Util Class:

import java.util.regex.Pattern;

public class PropertyInfoUtil {

    public boolean validatePropertyId(String propertyId) throws InvalidPropertyException {
        if (!Pattern.matches("[A-Z]{3}\\d{4}", propertyId)) {
            throw new InvalidPropertyException(propertyId + " is an invalid propertyId");
        }
        return true;
    }

    public boolean validatePhoneNumber(long phoneNumber) throws InvalidPropertyException {
        String phoneString = String.valueOf(phoneNumber);
        if (phoneString.length() != 10) {
            throw new InvalidPropertyException(phoneNumber + " is an invalid phoneNumber");
        }
        return true;
    }

    public boolean validateEmailId(String emailId) throws InvalidPropertyException {
        if (!emailId.contains("@") || !emailId.endsWith(".com")) {
            throw new InvalidPropertyException(emailId + " is an invalid emailId");
        }
        return true;
    }

    public double calculateTaxAmount(double cent) throws InvalidPropertyException {
        if (cent < 0) {
            throw new InvalidPropertyException(cent + " is an invalid cent");
        } else if (cent > 0 && cent <= 6) {
            return 3000.0;
        } else {
            return 7000.0;
        }
    }
}


# UserInterface:

import java.util.Scanner;

public class UserInterface {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PropertyInfoUtil propertyInfoUtil = new PropertyInfoUtil();

        System.out.println("Enter the property details");
        String inputDetails = scanner.nextLine();

        String[] details = inputDetails.split(":");
        if (details.length != 5) {
            System.out.println("Invalid input format");
            System.out.println("Thank you for using the application, Have a great day");
            return;
        }

        String propertyId = details[0];
        String propertyHolderName = details[1]; // Not used for validation
        long phoneNumber;
        String emailId = details[3];
        double cent;

        try {
            phoneNumber = Long.parseLong(details[2]);
            cent = Double.parseDouble(details[4]);

            propertyInfoUtil.validatePropertyId(propertyId);
            propertyInfoUtil.validatePhoneNumber(phoneNumber);
            propertyInfoUtil.validateEmailId(emailId);
            double taxAmount = propertyInfoUtil.calculateTaxAmount(cent);

            System.out.printf("Tax amount is %.1f%n", taxAmount);
        } catch (InvalidPropertyException e) {
            System.out.println(e.getMessage());
        } catch (NumberFormatException e) {
            System.out.println("Invalid number format in input");
        } finally {
            System.out.println("Thank you for using the application, Have a great day");
        }

        scanner.close();
    }
}


*********Electric Avenue*********

# Util Class:


import java.util.regex.Pattern;

public class AvenueBillingService {

    public boolean validateConsumerId(String consumerId) throws InvalidBillException {
        if (!Pattern.matches("IN\\d{4}", consumerId)) {
            throw new InvalidBillException("Invalid Consumer Id");
        }
        return true;
    }

    public boolean validateUnitsConsumed(double unitsConsumed) throws InvalidBillException {
        if (unitsConsumed <= 0) {
            throw new InvalidBillException("Invalid Units Consumed");
        }
        return true;
    }

    public boolean validateConnectionType(String connectionType) throws InvalidBillException {
        if (!connectionType.equals("Domestic") && 
            !connectionType.equals("Commercial") && 
            !connectionType.equals("Industrial")) {
            throw new InvalidBillException("Invalid Connection Type");
        }
        return true;
    }

    public double calculateAvenueBill(String connectionType, double unitsConsumed) {
        double ratePerUnit;

        switch (connectionType) {
            case "Domestic":
                ratePerUnit = 6.5;
                break;
            case "Commercial":
                ratePerUnit = 8.0;
                break;
            case "Industrial":
                ratePerUnit = 10.0;
                break;
            default:
                throw new IllegalArgumentException("Invalid connection type");
        }

        return unitsConsumed * ratePerUnit;
    }
}



# UserInterface

import java.util.Scanner;

public class UserInterface {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        AvenueBillingService billingService = new AvenueBillingService();

        System.out.println("Enter the details");
        String inputDetails = scanner.nextLine();

        String[] details = inputDetails.split(":");
        if (details.length != 4) {
            System.out.println("Invalid input format");
            System.out.println("Thank you for using the application");
            return;
        }

        String consumerId = details[0];
        String consumerName = details[1]; // Not used for validation
        double unitsConsumed;
        String connectionType = details[3];

        try {
            unitsConsumed = Double.parseDouble(details[2]);

            billingService.validateConsumerId(consumerId);
            billingService.validateUnitsConsumed(unitsConsumed);
            billingService.validateConnectionType(connectionType);

            double billAmount = billingService.calculateAvenueBill(connectionType, unitsConsumed);
            System.out.printf("Electricity Bill Rs %.1f%n", billAmount);
        } catch (InvalidBillException e) {
            System.out.println(e.getMessage());
        } catch (NumberFormatException e) {
            System.out.println("Invalid number format for units consumed");
        } finally {
            System.out.println("Thank you for using the application");
        }

        scanner.close();
    }
}


*********END**********