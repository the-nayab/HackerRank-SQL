***Parked With love***

# Utility Class:


import java.util.List;
import java.util.stream.Stream;

public class ParkingLotUtility {

    // Sort parking lots by capacity in descending order
    public Stream<ParkingLot> retrieveParkingLotDetailsInDescendingOrderByCapacity(List<ParkingLot> parkingLotList) {
        return parkingLotList.stream()
                .sorted((lot1, lot2) -> Integer.compare(lot2.getCapacity(), lot1.getCapacity()));
    }

    // Retrieve parking lots with available spaces for cars
    public Stream<ParkingLot> retrieveParkingLotDetailsHavingAvailableSpacesForCars(List<ParkingLot> parkingLotList) {
        return parkingLotList.stream()
                .filter(lot -> lot.getParkedCarsCount() < lot.getCapacity());
    }

    // Retrieve parking lots with no available spaces for bikes
    public Stream<ParkingLot> retrieveParkingLotDetailsHavingNoAvailableSpacesForBikes(List<ParkingLot> parkingLotList) {
        return parkingLotList.stream()
                .filter(lot -> lot.getParkedBikesCount() == lot.getCapacity());
    }
}


#User Interface:

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class UserInterface {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<ParkingLot> parkingLotList = new ArrayList<>();

        System.out.println("Enter the number of parking lots:");
        int numberOfLots = Integer.parseInt(scanner.nextLine());

        System.out.println("Enter the parking lot details (name:capacity:parkedCars:parkedBikes):");
        for (int i = 0; i < numberOfLots; i++) {
            String[] details = scanner.nextLine().split(":");
            String name = details[0];
            int capacity = Integer.parseInt(details[1]);
            int parkedCars = Integer.parseInt(details[2]);
            int parkedBikes = Integer.parseInt(details[3]);

            ParkingLot lot = new ParkingLot(name, capacity, parkedCars, parkedBikes);
            parkingLotList.add(lot);
        }

        ParkingLotUtility utility = new ParkingLotUtility();

        // Sort and display parking lots by capacity
        System.out.println("Parking lots in descending order of capacity:");
        utility.retrieveParkingLotDetailsInDescendingOrderByCapacity(parkingLotList)
                .forEach(System.out::println);

        // Display parking lots with available spaces for cars
        System.out.println("\nParking lots with available spaces for cars:");
        utility.retrieveParkingLotDetailsHavingAvailableSpacesForCars(parkingLotList)
                .forEach(System.out::println);

        // Display parking lots with no available spaces for bikes
        System.out.println("\nParking lots with no available spaces for bikes:");
        utility.retrieveParkingLotDetailsHavingNoAvailableSpacesForBikes(parkingLotList)
                .forEach(System.out::println);

        scanner.close();
    }
}



****Wallet Bank****

# Utility Class:

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class AccountUtil {

    // Retrieve account details by account number
    public Account retrieveAccountDetailsByAccountNumber(Stream<Account> accountStream, String accountNumber) {
        return accountStream
                .filter(account -> account.getAccountNumber().equals(accountNumber))
                .findFirst()
                .orElse(null);
    }

    // Retrieve account details by account type
    public List<Account> retrieveAccountDetailsByAccountType(Stream<Account> accountStream, String accountType) {
        return accountStream
                .filter(account -> account.getAccountType().equals(accountType))
                .collect(Collectors.toList());
    }

    // Retrieve account details by balance range
    public Stream<Account> retrieveAccountDetailsByBalanceRange(Stream<Account> accountStream, double minimumRange, double maximumRange) {
        return accountStream
                .filter(account -> account.getBalance() >= minimumRange && account.getBalance() <= maximumRange);
    }
}



# UserInterface class:


import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Stream;

public class UserInterface {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Account> accountList = new ArrayList<>();

        System.out.println("Enter the number of account details to be added:");
        int numberOfAccounts = Integer.parseInt(scanner.nextLine());

        System.out.println("Enter the account details (accountNumber,customerName,accountType,balance,phoneNumber):");
        for (int i = 0; i < numberOfAccounts; i++) {
            String[] details = scanner.nextLine().split(",");
            String accountNumber = details[0];
            String customerName = details[1];
            String accountType = details[2];
            double balance = Double.parseDouble(details[3]);
            String phoneNumber = details[4];

            Account account = new Account(accountNumber, customerName, accountType, balance, phoneNumber);
            accountList.add(account);
        }

        AccountUtil accountUtil = new AccountUtil();

        // Retrieve account by account number
        System.out.println("Enter the Account Number:");
        String accountNumberInput = scanner.nextLine();
        Account accountDetails = accountUtil.retrieveAccountDetailsByAccountNumber(accountList.stream(), accountNumberInput);
        
        if (accountDetails != null) {
            System.out.println(accountDetails);
        } else {
            System.out.println("No account details found for the given account number");
        }

        // Retrieve account by account type
        System.out.println("Enter the Account Type:");
        String accountTypeInput = scanner.nextLine();
        List<Account> accountsByType = accountUtil.retrieveAccountDetailsByAccountType(accountList.stream(), accountTypeInput);

        if (!accountsByType.isEmpty()) {
            accountsByType.forEach(System.out::println);
        } else {
            System.out.println("No account details found for the given account type");
        }

        // Retrieve account by balance range
        System.out.println("Enter the minimum and maximum balance range to show accounts details:");
        double minBalance = Double.parseDouble(scanner.nextLine());
        double maxBalance = Double.parseDouble(scanner.nextLine());
        
        System.out.println("Account details within the balance range are:");
        Stream<Account> accountsInRange = accountUtil.retrieveAccountDetailsByBalanceRange(accountList.stream(), minBalance, maxBalance);
        
        accountsInRange.map(Account::getAccountNumber).forEach(System.out::println);
        
        if (accountsInRange.count() == 0) {
            System.out.println("No account numbers found within the specified balance range");
        }

        scanner.close();
    }
}



*****MasterChef*****


#Utility Class:

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class ParticipantUtil {

    // Retrieve participant details by participant ID
    public Participant retrieveParticipantDetailsByParticipantId(Stream<Participant> participantStream, String participantId) {
        return participantStream
                .filter(participant -> participant.getParticipantId().equals(participantId))
                .findFirst()
                .orElse(null);
    }

    // Retrieve participant details by food type
    public List<Participant> retrieveParticipantDetailsByFoodType(Stream<Participant> participantStream, String foodType) {
        return participantStream
                .filter(participant -> participant.getFoodType().equals(foodType))
                .collect(Collectors.toList());
    }

    // Retrieve top participants by points
    public Stream<Participant> retrieveTopParticipantIdsByPoints(Stream<Participant> participantStream, int topCount) {
        return participantStream
                .sorted((p1, p2) -> Double.compare(p2.getPoints(), p1.getPoints()))
                .limit(topCount);
    }
}



# UserInterface

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Stream;

public class UserInterface {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Participant> participantList = new ArrayList<>();

        System.out.println("Enter the number of participants:");
        int numberOfParticipants = Integer.parseInt(scanner.nextLine());

        System.out.println("Enter the participant details (ID:Name:FoodType:HotelName:Points):");
        for (int i = 0; i < numberOfParticipants; i++) {
            String[] details = scanner.nextLine().split(":");
            String participantId = details[0];
            String participantName = details[1];
            String foodType = details[2];
            String hotelName = details[3];
            double points = Double.parseDouble(details[4]);

            Participant participant = new Participant(participantId, participantName, foodType, hotelName, points);
            participantList.add(participant);
        }

        ParticipantUtil participantUtil = new ParticipantUtil();

        // Retrieve participant by participant ID
        System.out.println("Enter the participant ID:");
        String participantIdInput = scanner.nextLine();
        Participant participantDetails = participantUtil.retrieveParticipantDetailsByParticipantId(participantList.stream(), participantIdInput);
        
        if (participantDetails != null) {
            System.out.println(participantDetails);
        } else {
            System.out.println("No participant found for the given participant ID");
        }

        // Retrieve participant by food type
        System.out.println("Enter the food type:");
        String foodTypeInput = scanner.nextLine();
        List<Participant> participantsByFoodType = participantUtil.retrieveParticipantDetailsByFoodType(participantList.stream(), foodTypeInput);

        if (!participantsByFoodType.isEmpty()) {
            System.out.println("Participants with the given food type are:");
            participantsByFoodType.forEach(System.out::println);
        } else {
            System.out.println("No participants were found for the given food type");
        }

        // Retrieve top participants by points
        System.out.println("Enter the count to get the top participants by points:");
        int topCount = Integer.parseInt(scanner.nextLine());
        
        System.out.println("Top participants by points:");
        Stream<Participant> topParticipants = participantUtil.retrieveTopParticipantIdsByPoints(participantList.stream(), topCount);
        
        topParticipants.map(Participant::getParticipantId).forEach(System.out::println);
        
        if (topCount > participantList.size()) {
            System.out.println("The requested count exceeds the number of participants.");
        }

        scanner.close();
    }
}




****Dance Center *****


# Utility Class:

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class DanceUtil {

    // Retrieve dance details by dance name
    public Dance retrieveDanceDetailsByDanceName(Stream<Dance> danceStream, String danceName) {
        return danceStream
                .filter(dance -> dance.getDanceName().equals(danceName))
                .findFirst()
                .orElse(null);
    }

    // Retrieve dance details by state
    public List<Dance> retrieveDanceDetailsByDanceState(Stream<Dance> danceStream, String state) {
        return danceStream
                .filter(dance -> dance.getState().equals(state))
                .collect(Collectors.toList());
    }

    // Retrieve dance details sorted by number of dancers in descending order
    public Stream<Dance> retrieveDanceDetailsByNoOfDancers(Stream<Dance> danceStream) {
        return danceStream
                .sorted((d1, d2) -> Long.compare(d2.getNoOfDancers(), d1.getNoOfDancers()));
    }
}



# UserInterface:

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Stream;

public class UserInterface {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Dance> danceList = new ArrayList<>();

        // Getting the number of dance details to be added
        System.out.println("Enter the number of dance details to be added:");
        int numberOfDances = Integer.parseInt(scanner.nextLine());

        System.out.println("Enter the dance details (name,type,state,noOfDancers):");
        for (int i = 0; i < numberOfDances; i++) {
            String[] details = scanner.nextLine().split(",");
            String danceName = details[0];
            String danceType = details[1];
            String state = details[2];
            long noOfDancers = Long.parseLong(details[3]);

            Dance dance = new Dance(danceName, danceType, state, noOfDancers);
            danceList.add(dance);
        }

        DanceUtil danceUtil = new DanceUtil();

        // Retrieve dance details by dance name
        System.out.println("Enter the dance name:");
        String danceNameInput = scanner.nextLine();
        Dance danceDetails = danceUtil.retrieveDanceDetailsByDanceName(danceList.stream(), danceNameInput);
        
        if (danceDetails != null) {
            System.out.println(danceDetails);
        } else {
            System.out.println("No dance details found for the given dance name.");
        }

        // Retrieve dance details by state
        System.out.println("Enter the dance state:");
        String stateInput = scanner.nextLine();
        List<Dance> dancesByState = danceUtil.retrieveDanceDetailsByDanceState(danceList.stream(), stateInput);

        if (!dancesByState.isEmpty()) {
            System.out.println("Dance details for the specified state:");
            dancesByState.forEach(System.out::println);
        } else {
            System.out.println("No dance details found for the given state.");
        }

        // Retrieve dance details sorted by number of dancers
        System.out.println("Dance Details in descending order based on number of dancers:");
        danceUtil.retrieveDanceDetailsByNoOfDancers(danceList.stream())
                .forEach(System.out::println);

        scanner.close();
    }
}





*****END********



